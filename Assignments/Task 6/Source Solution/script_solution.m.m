clear all;
clc;

% =================================================================
% ====================== 1 - Load the data ========================
% =================================================================

load VIPD.mat;

s = table2array(VIPDedgelist(:,1));
t = table2array(VIPDedgelist(:,2));

G = graph(s,t,[],max(s));

% =================================================================
% =================== 2 - Generate a subgraph =====================
% =================================================================

cnt = 'degree';
d = centrality(G,cnt);

G_New = subgraph(G,d>=1);

% =================================================================
% =================== 3 - Plot the sub-graph ======================
% =================================================================

figure(1)
plot(G_New,'Layout','force','iterations',10);

% =================================================================
% ============== 4 - Plot the degree distribution =================
% =================================================================

deg = degree(G_New);

figure(2)
plot(deg)
plot(sort(deg));

% =================================================================
% ================ 5 - Find the average degree ====================
% =================================================================

fprintf('%f \n',mean(deg));

% =================================================================
% ========= 6 - Find the average clustering coefficient ===========
% =================================================================

cc = clustering_coef_bu(G_New.adjacency);
fprintf('%f \n',mean(cc));

% =================================================================
% ============== 7 - Find the average path length =================
% =================================================================

pl = distances(G_New,'Method','unweighted');
% Replace all the 'Infinite' with '0'
pl(~isfinite(pl)) = 0;
n = numnodes(G_New);
fprintf('%f \n',(sum(pl,'all')/(n*(n-1))));

% =================================================================
% ========== 8 - Find the number of nodes of the graph ============
% =================================================================

fprintf('%d \n',numnodes(G_New));
